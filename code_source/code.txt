// Texte
     SDL_Color White = {red, green, blue}; // Couleur de la police
     SDL_Surface* surfaceMessage =
             TTF_RenderText_Solid(Sans, "Bonjour", White); // Text
     SDL_Texture* Message = SDL_CreateTextureFromSurface(renderer, surfaceMessage);
     SDL_Rect Message_rect;
     Message_rect.x = x;  // X
     Message_rect.y = y; // Y
     Message_rect.w = 120; // Longeur
     Message_rect.h = 40; // Hauteur
     SDL_RenderCopy(renderer, Message, NULL, &Message_rect);
     SDL_FreeSurface(surfaceMessage);
     SDL_DestroyTexture(Message);

// Px
     SDL_RenderDrawPoint(renderer, x, y);

// Couleur Fond
     SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
     SDL_RenderClear(renderer);








#include <stdio.h>
#include <time.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>


// Taille fenetre 
    const int WINDOW_WIDTH = 640;
    const int WINDOW_HEIGHT = 600;

void sleep_end_of_frame() {
    struct timespec sleep;
    sleep.tv_sec = 0;
    sleep.tv_nsec = 16 * 1000 * 1000;
    nanosleep(&sleep, NULL);
}

int main(int argc, char** args)
{
    
    SDL_Window* window = NULL; // The window we'll be rendering to
    SDL_Surface* screenSurface = NULL; // The surface contained by the window
    SDL_Renderer* renderer = NULL;

    if(SDL_Init(SDL_INIT_VIDEO ) < 0) { // Initialize SDL
        printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
        return 1;
    }
    
    if(TTF_Init() < 0) { // Initialize SDL
        printf("Cound not initialize TTF", SDL_GetError());
        return 1;
    }

    window = SDL_CreateWindow("Ligne", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, WINDOW_WIDTH, WINDOW_HEIGHT, 0); // Create window

    renderer = SDL_CreateRenderer(window, -1, 0); // Create renderer
    if (renderer == NULL) {
        printf("SDL could not create renderer! SDL_Error: %s\n", SDL_GetError());
        return 1;
    }

    //Police de texte
        TTF_Font* Sans = TTF_OpenFont("Humnst777_BlkCn_BT.ttf", 24);
        if (Sans == NULL) {
            printf("Could not open font, error: %s\n", SDL_GetError());
            return 1;
        }

    // Color fond
        SDL_SetRenderDrawColor(renderer, 52, 58, 78, 255);
        SDL_RenderClear(renderer);

        int x=0;
        int y=0;
        int r=1;
        int red;
        int green;
        int blue;

    // Jeux
        SDL_Event event;
        while (1) {
            if (SDL_PollEvent(&event) && event.type == SDL_QUIT)
                break;

                if (r >=13)
                    r = 1;

                switch (r)
                {
                case 1:
                    red=204;green=0;blue=0;
                    break;
                case 2:
                    red=204;green=102;blue=0;
                    break;
                case 3:
                    red=204;green=204;blue=0;
                    break;
                case 4:
                    red=102;green=204;blue=0;
                    break;
                case 5:
                    red=0;green=240;blue=0;
                    break;
                case 6:
                    red=0;green=204;blue=102;
                    break;
                case 7:
                    red=0;green=204;blue=204;
                    break;
                case 8:
                    red=0;green=102;blue=204;
                    break;
                case 9:
                    red=0;green=0;blue=204;
                    break;
                case 10:
                    red=102;green=0;blue=204;
                    break;
                case 11:
                    red=204;green=0;blue=204;
                    break;
                case 12:
                    red=204;green=0;blue=102;
                    break;
                
                default:
                    red=255;green=255;blue=255;
                    break;
                }
                SDL_SetRenderDrawColor(renderer, red, green, blue, 255);

                SDL_RenderDrawPoint(renderer, x, y);

                x = rand() % 640 + 1;
                y = rand() % 480 + 1;
                r++;


            SDL_RenderPresent(renderer); // Frame
            sleep_end_of_frame();
        }

    SDL_DestroyRenderer(renderer); // Destroy renderer
    SDL_DestroyWindow(window); // Destroy window
    SDL_Quit(); // Quit SDL subsystems

    return 0;
}